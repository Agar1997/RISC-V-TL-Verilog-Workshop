\m4_TLV_version 1d: tl-x.org
\SV
   // This code can be found in: https://github.com/stevehoover/RISC-V_MYTH_Workshop
   
   m4_include_lib(['https://raw.githubusercontent.com/BalaDhinesh/RISC-V_MYTH_Workshop/master/tlv_lib/risc-v_shell_lib.tlv'])

\SV
   m4_makerchip_module   // (Expanded in Nav-TLV pane.)
\TLV

   // /====================\
   // | Sum 1 to 9 Program |
   // \====================/
   //
   // Program for MYTH Workshop to test RV32I
   // Add 1,2,3,...,9 (in that order).
   //
   // Regs:
   //  r10 (a0): In: 0, Out: final sum
   //  r12 (a2): 10
   //  r13 (a3): 1..10
   //  r14 (a4): Sum
   // 
   // External to function:
   m4_asm(ADD, r10, r0, r0)             // Initialize r10 (a0) to 0.
   // Function:
   m4_asm(ADD, r14, r10, r0)            // Initialize sum register a4 with 0x0
   m4_asm(ADDI, r12, r10, 1010)         // Store count of 10 in register a2.
   m4_asm(ADD, r13, r10, r0)            // Initialize intermediate sum register a3 with 0
   // Loop:
   m4_asm(ADD, r14, r13, r14)           // Incremental addition
   m4_asm(ADDI, r13, r13, 1)            // Increment intermediate register by 1
   m4_asm(BLT, r13, r12, 1111111111000) // If a3 is less than a2, branch to label named <loop>
   m4_asm(ADD, r10, r14, r0)            // Store final result to register a0 so that it can be read by main program
   
   // Optional:
   // m4_asm(JAL, r7, 00000000000000000000) // Done. Jump to itself (infinite loop). (Up to 20-bit signed immediate plus implicit 0 bit (unlike JALR) provides byte address; last immediate bit should also be 0)
   m4_define_hier(['M4_IMEM'], M4_NUM_INSTRS)

   |cpu
      @0
         $reset = *reset;
         
         $start = !$reset && >>1$reset;
        
         $valid = $reset                 ? 1'b0 :
           $start                 ? 1'b1  :
            >>3$valid_taken_br     ? 1'b0  :   // kill shadow on branch
            >>3$valid_load_redirect? 1'b0  :   // kill shadow on load
            >>3$valid;
            
         // Program Counter
         $pc = $reset                    ? RESET_PC :
          >>3$valid_taken_br        ? >>3$br_tgt_pc :
            >>3$valid_load_redirect   ? >>3$pc :     // PC from 3 instrs ago
                                  >>3$inc_pc;

         // Enable instruction memory read
         $imem_rd_en = $valid;

         // Full address to imem (assign the whole signal)
         $imem_rd_addr = $pc[M4_IMEM_INDEX_CNT+1:2]; // drops [1:0] because instructions are word-aligned

      @1
         // Increment PC
         $inc_pc = $pc + 32'd4;

         // Capture instruction from imem
         ?$valid
            $instr = $imem_rd_data; // imem provides this based on previous cycle's address

         
         $is_i_instr  = $instr[6:2] ==? 5'b00000 ||
               $instr[6:2] ==? 5'b00001 ||
               $instr[6:2] ==? 5'b00100 ||
               $instr[6:2] ==? 5'b00110 ||
               $instr[6:2] ==? 5'b11001;

         $is_r_instr  = $instr[6:2] ==? 5'b01011 ||
               $instr[6:2] ==? 5'b01100 ||
               $instr[6:2] ==? 5'b01110 ||
               $instr[6:2] ==? 5'b10100;

         $is_s_instr  = $instr[6:2] ==? 5'b0100x;

         $is_b_instr  = $instr[6:2] ==? 5'b11000;

         $is_u_instr  = $instr[6:2] ==? 5'b00101 ||
               $instr[6:2] ==? 5'b01101;

         $is_j_instr  = $instr[6:2] ==? 5'b11011;

         $imm[31:0] =
            $is_i_instr ? { {21{$instr[31]}}, $instr[30:20] } :
            $is_s_instr ? { {21{$instr[31]}}, $instr[30:25], $instr[11:7] } :
            $is_b_instr ? { {20{$instr[31]}}, $instr[7], $instr[30:25], $instr[11:8], 1'b0 } :
            $is_u_instr ? { $instr[31:12], 12'b0 } :
            $is_j_instr ? { {12{$instr[31]}}, $instr[19:12], $instr[20], $instr[30:25], $instr[24:21], 1'b0 } :
            32'b0;
         
         // Valid conditions for each field
         $rs2_valid    = $is_r_instr || $is_s_instr || $is_b_instr;
         $rs1_valid    = $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
         $funct3_valid = $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
         $funct7_valid = $is_r_instr;
         $rd_valid     = $is_r_instr || $is_i_instr || $is_u_instr || $is_j_instr;

         
         // Common fields
         ?$rs2_valid    
            $rs2[4:0]    = $instr[24:20];
         ?$rs1_valid    
            $rs1[4:0]    = $instr[19:15];
         ?$funct3_valid 
            $funct3[2:0] = $instr[14:12];
         ?$funct7_valid 
            $funct7[6:0] = $instr[31:25];
         ?$rd_valid     
            $rd[4:0]     = $instr[11:7];
         $opcode[6:0]   = $instr[6:0];  // opcode always valid

         $dec_bits[10:0] = {$funct7[5], $funct3,$opcode};

         $is_beq  = $dec_bits ==? 11'bx_000_1100011;  // BEQ
         $is_bne  = $dec_bits ==? 11'bx_001_1100011;  // BNE
         $is_blt  = $dec_bits ==? 11'bx_100_1100011;  // BLT
         $is_bge  = $dec_bits ==? 11'bx_101_1100011;  // BGE
         $is_bltu = $dec_bits ==? 11'bx_110_1100011;  // BLTU
         $is_bgeu = $dec_bits ==? 11'bx_111_1100011;  // BGEU

         // ADD (R-type, funct7[5] = 0)
         $is_add  = $dec_bits ==? 11'b0_000_0110011;  // ADD

         // ADDI (I-type, funct7[5] don't care â€” immediate form)
         $is_addi = $dec_bits ==? 11'bx_000_0010011;  // ADDI
         
         // Remaining instructions
         $is_lui   = ($opcode == 7'b0110111);
         $is_auipc = ($opcode == 7'b0010111);
         $is_jal   = ($opcode == 7'b1101111);
         $is_jalr  = $dec_bits == 11'bx_000_1100111;

         $is_slti  = $dec_bits == 11'bx_010_0010011;
         $is_sltiu = $dec_bits == 11'bx_011_0010011;
         $is_xori  = $dec_bits == 11'bx_100_0010011;
         $is_ori   = $dec_bits == 11'bx_110_0010011;
         $is_andi  = $dec_bits == 11'bx_111_0010011;

         $is_slli  = $dec_bits == 11'b0_001_0010011;
         $is_srli  = $dec_bits == 11'b0_101_0010011;
         $is_srai  = $dec_bits == 11'b1_101_0010011;

         $is_sub   = $dec_bits == 11'b1_000_0110011;
         $is_sll   = $dec_bits == 11'b0_001_0110011;
         $is_slt   = $dec_bits == 11'b0_010_0110011;
         $is_sltu  = $dec_bits == 11'b0_011_0110011;
         $is_xor   = $dec_bits == 11'b0_100_0110011;
         $is_srl   = $dec_bits == 11'b0_101_0110011;
         $is_sra   = $dec_bits == 11'b1_101_0110011;
         $is_or    = $dec_bits == 11'b0_110_0110011;
         $is_and   = $dec_bits == 11'b0_111_0110011;

         $is_sb    = ($opcode == 7'b0100011 && $funct3 == 3'b000);
         $is_sh    = ($opcode == 7'b0100011 && $funct3 == 3'b001);
         $is_sw    = ($opcode == 7'b0100011 && $funct3 == 3'b010);

         // Load instructions (any funct3)
         $is_load  = ($opcode == 7'b0000011);

      
         BOGUS_USE( \
         $is_beq $is_bne $is_blt $is_bge $is_bltu $is_bgeu \
         $is_add $is_lui $is_auipc $is_jal $is_jalr \
         $is_addi $is_slti $is_sltiu $is_xori $is_ori $is_andi \
         $is_slli $is_srli $is_srai \
         $is_sub $is_sll $is_slt $is_sltu $is_xor $is_srl $is_sra $is_or $is_and \
         $is_sb $is_sh $is_sw $is_load)
      
         
      @2
         $rf_rd_en1    = $rs1_valid;
         $rf_rd_index1 = $rs1;

         $rf_rd_en2    = $rs2_valid;
         $rf_rd_index2 = $rs2;
         
         //Array
         $rd_en      = $rs1_valid && $valid;
         $rd_index[5:0] = $rs1;
         
                   
         // Branch decision logic
         $taken_br =
            $is_beq  ? ($src1_value == $src2_value) :
            $is_bne  ? ($src1_value != $src2_value) :
            $is_blt  ? (($src1_value[31] != $src2_value[31]) ? $src1_value[31] : ($src1_value < $src2_value)) :
            $is_bge  ? (($src1_value[31] != $src2_value[31]) ? !$src1_value[31] : ($src1_value >= $src2_value)) :
            $is_bltu ? ($src1_value < $src2_value) :
            $is_bgeu ? ($src1_value >= $src2_value) :
                    1'b0;
      
         // Branch target address
         $br_tgt_pc = $pc + $imm;

         
      @3 
         $result[31:0] =
          // Immediate-type logicals
          $is_andi  ? ($src1_value & $imm) :
          $is_ori   ? ($src1_value | $imm) :
          $is_xori  ? ($src1_value ^ $imm) :
  
          // Immediate-type arithmetic
          $is_addi  ? ($src1_value + $imm) :
          $is_slti  ? ($src1_value[31] == $imm[31] ? ($src1_value < $imm) : $src1_value[31]) :
          $is_sltiu ? ($src1_value < $imm) :
  
          // Immediate-type shifts
          $is_slli  ? ($src1_value << $imm[4:0]) :
          $is_srli  ? ($src1_value >> $imm[4:0]) :
          $is_srai  ? ({ {32{$src1_value[31]}}, $src1_value } >> $imm[4:0]) :
  
          // Register-type logicals
          $is_and   ? ($src1_value & $src2_value) :
          $is_or    ? ($src1_value | $src2_value) :
          $is_xor   ? ($src1_value ^ $src2_value) :
  
          // Register-type arithmetic
          $is_add   ? ($src1_value + $src2_value) :
          $is_sub   ? ($src1_value - $src2_value) :
          $is_slt   ? (($src1_value[31] != $src2_value[31]) ? $src1_value[31] : ($src1_value < $src2_value)) :
          $is_sltu  ? ($src1_value < $src2_value) :
  
          // Register-type shifts
          $is_sll   ? ($src1_value << $src2_value[4:0]) :
          $is_srl   ? ($src1_value >> $src2_value[4:0]) :
          $is_sra   ? ({ {32{$src1_value[31]}}, $src1_value } >> $src2_value[4:0]) :
  
          // U-type
          $is_lui   ? $imm :
          $is_auipc ? ($pc + $imm) :
  
          // Jumps
          $is_jal   ? ($pc + 4) :
          $is_jalr  ? ($pc + 4) :
  
          32'bx;
          
         // ---------- Load/Store address and store-data ----------
         $ld_st_addr[31:0] = 
           ($is_load || $is_sb || $is_sh || $is_sw) ? ($src1_value + $imm) : 32'b0;

         $st_data[31:0] = $src2_value;   // what to write on stores

         // ---------- Load redirect (like branch flush) ----------
         $valid_load_redirect = $valid && $is_load;

         // ---------- Writeback value (loads write data from DMem) ----------
         // DMem read data returns at @5, so align it back to the write stage (@3) with >>2.
         $wb_result[31:0] = $is_load ? >>2$ld_data : $result;

         
         // Register File Write Enable
         // Enable write if rd is valid, not x0, and not reset
         $rf_wr_en = $valid && $rd_valid && ($rd != 5'd0);

         // Write port index (destination register)
         $rf_wr_index[4:0] = $rd;

         // Write data is the ALU result
         $rf_wr_data[31:0] = $result;
         // Register File Write Enable (unchanged condition) â€“ but drive final WB value

         $rf_wr_data[31:0] = $wb_result;
         
         // Inputs to the array
         $wr_en      = $rd_valid && ($rd != 5'd0);
         $wr_index[5:0] = $rd;
         $wr_data[31:0] = $result;
         
         // For src1
         $src1_value =
            (>>1$rf_wr_en && (>>1$rf_wr_index == $rs1)) ? >>1$result :
               $rf_rd_data1;

         // For src2
         $src2_value =
           (>>1$rf_wr_en && (>>1$rf_wr_index == $rs2)) ? >>1$result :
              $rf_rd_data2;



         // Array storage (one cycle delay for read)
         ?$wr_en
            $value[$wr_index] = $wr_data;
            
         $valid_taken_br = $valid && $taken_br;       

         // Read from the stored values (delayed by one cycle)
         ?$rd_en
            $rd_data[31:0] = >>1$value[$rd_index];
            
      @4
         // ---------- Data memory interface (@4) ----------
         $dmem_addr[31:0]   = >>1$ld_st_addr;

         $dmem_rd_en        = >>1$valid && >>1$is_load;
         $dmem_wr_en        = >>1$valid && (>>1$is_sb || >>1$is_sh || >>1$is_sw);

         $dmem_wr_data[31:0] = >>1$st_data;
         
         

      @5
         ?$dmem_rd_en
         $ld_data[31:0] = $dmem_rd_data;


      // Note: Because of the magic we are using for visualisation, if visualisation is enabled below,
      //       be sure to avoid having unassigned signals (which you might be using for random inputs)
      //       other than those specifically expected in the labs. You'll get strange errors for these.

   
   // Assert these to end simulation (before Makerchip cycle limit).
   *passed = |cpu/xreg[10]>>5$value == (1+2+3+4+5+6+7+8+9);
   *failed = 1'b0;
   
   // Macro instantiations for:
   //  o instruction memory
   //  o register file
   //  o data memory
   //  o CPU visualization
   |cpu
      m4+imem(@1)    // Args: (read stage)
      m4+rf(@2, @3)  // Args: (read stage, write stage) - if equal, no register bypass is required
      m4+dmem(@4)    // Args: (read/write stage)

   m4+cpu_viz(@4)    // For visualisation, argument should be at least equal to the last stage of CPU logic. @4 would work for all labs.
\SV
   endmodule


